{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ static STATUS_IDLE = \"idle\";\n    static STATUS_PLAYING = \"playing\";\n    static STATUS_WIN = \"win\";\n    static STATUS_LOSE = \"lose\";\n    static WINNING_TILE = 2048;\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        // eslint-disable-next-line no-console\n        this.initialState = initialState.map((row)=>[\n                ...row\n            ]);\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.STATUS_IDLE;\n    }\n    moveLeft() {\n        if (this.status !== $a5fd07fa01589658$var$Game.STATUS_PLAYING) return;\n        let stateChanged = false;\n        for(let row = 0; row < 4; row++){\n            const newRow = this.slideAndMerge(this.state[row]);\n            if (newRow.toString() !== this.state[row].toString()) stateChanged = true;\n            this.state[row] = newRow;\n        }\n        if (stateChanged) this.spawnTile();\n        this.checkLose();\n        this.checkWin();\n    }\n    moveRight() {\n        this.state = this.state.map((row)=>row.reverse());\n        this.moveLeft();\n        this.state = this.state.map((row)=>row.reverse());\n    }\n    moveUp() {\n        this.transpose();\n        this.moveLeft();\n        this.transpose();\n    }\n    moveDown() {\n        this.transpose();\n        this.moveRight();\n        this.transpose();\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state.map((row)=>[\n                ...row\n            ]);\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = $a5fd07fa01589658$var$Game.STATUS_PLAYING;\n        this.spawnTile();\n        this.spawnTile();\n        this.checkWin();\n        this.checkLose();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.STATUS_IDLE;\n    }\n    // Add your own methods here\n    spawnTile() {\n        const emptyTiles = [];\n        for(let row = 0; row < 4; row++){\n            for(let column = 0; column < 4; column++)if (this.state[row][column] === 0) emptyTiles.push({\n                row: row,\n                column: column\n            });\n        }\n        if (emptyTiles.length > 0) {\n            const { row: row, column: column } = emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n            this.state[row][column] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    transpose() {\n        const transposedGrid = this.initialState.map((row)=>[\n                ...row\n            ]);\n        for(let row = 0; row < 4; row++)for(let column = 0; column < 4; column++)transposedGrid[column][row] = this.state[row][column];\n        this.state = transposedGrid;\n    }\n    slideAndMerge(row) {\n        let filteredRows = row.filter((element)=>element !== 0);\n        for(let i = 0; i < filteredRows.length - 1; i++)if (filteredRows[i] === filteredRows[i + 1]) {\n            filteredRows[i] *= 2;\n            this.score += filteredRows[i];\n            filteredRows[i + 1] = 0;\n        }\n        filteredRows = filteredRows.filter((element)=>element !== 0);\n        while(filteredRows.length !== 4)filteredRows.push(0);\n        return filteredRows;\n    }\n    checkWin() {\n        for(let row = 0; row < 4; row++){\n            for(let column = 0; column < 4; column++)if (this.state[row][column] === $a5fd07fa01589658$var$Game.WINNING_TILE) this.status = $a5fd07fa01589658$var$Game.STATUS_WIN;\n        }\n    }\n    checkLose() {\n        for(let row = 0; row < 4; row++)for(let column = 0; column < 4; column++){\n            if (this.state[row][column] === 0) return;\n        }\n        for(let row = 0; row < 4; row++)for(let column = 0; column < 4; column++){\n            if (row < 3 && this.state[row][column] === this.state[row + 1][column] || column < 3 && this.state[row][column] === this.state[row][column + 1]) return;\n        }\n        this.status = $a5fd07fa01589658$var$Game.STATUS_LOSE;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// Write your code here\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\nlet $09e991522ca7e64e$var$isGameStarted = false;\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", (e)=>{\n    const clickedButton = e.target;\n    if (!clickedButton) return;\n    $09e991522ca7e64e$var$isGameStarted = !$09e991522ca7e64e$var$isGameStarted;\n    if ($09e991522ca7e64e$var$isGameStarted) $09e991522ca7e64e$var$startGame(clickedButton);\n    else $09e991522ca7e64e$var$restartGame(clickedButton);\n    $09e991522ca7e64e$var$updateGrid($09e991522ca7e64e$var$game.getState());\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if (!$09e991522ca7e64e$var$isGameStarted) return;\n    e.preventDefault();\n    switch(e.key){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n    }\n    $09e991522ca7e64e$var$updateMessage();\n    $09e991522ca7e64e$var$updateGrid($09e991522ca7e64e$var$game.getState());\n});\nfunction $09e991522ca7e64e$var$startGame(button) {\n    $09e991522ca7e64e$var$updateButtonState(\"Retart\", \"start\", \"restart\");\n    $09e991522ca7e64e$var$updateMessage();\n    $09e991522ca7e64e$var$game.start();\n}\nfunction $09e991522ca7e64e$var$restartGame(button) {\n    $09e991522ca7e64e$var$updateButtonState(\"Start\", \"restart\", \"start\");\n    $09e991522ca7e64e$var$updateMessage(\"start\");\n    $09e991522ca7e64e$var$game.restart();\n}\nfunction $09e991522ca7e64e$var$updateButtonState(text, removeClass, addClass) {\n    $09e991522ca7e64e$var$startButton.classList.replace(removeClass, addClass);\n    $09e991522ca7e64e$var$startButton.textContent = text;\n}\nfunction $09e991522ca7e64e$var$updateMessage(type = null) {\n    document.querySelectorAll(\".message\").forEach((message)=>{\n        message.classList.toggle(\"hidden\", true);\n    });\n    let messageStatus;\n    if (type) messageStatus = document.querySelector(`.message-${type}`);\n    else messageStatus = document.querySelector(`.message-${$09e991522ca7e64e$var$game.getStatus()}`);\n    if (messageStatus) messageStatus.classList.toggle(\"hidden\", false);\n}\nfunction $09e991522ca7e64e$var$updateGrid(newGrid) {\n    const grid = document.querySelectorAll(\".field-row\");\n    const score = document.querySelector(\".game-score\");\n    score.textContent = $09e991522ca7e64e$var$game.getScore();\n    for(let row = 0; row < 4; row++)for(let column = 0; column < 4; column++){\n        const cell = grid[row].children[column];\n        if (newGrid[row][column] !== 0) {\n            cell.textContent = newGrid[row][column];\n            cell.className = cell.className.replace(/field-cell--\\d+/g, \"\");\n            cell.classList.add(`field-cell--${newGrid[row][column]}`);\n        } else {\n            cell.textContent = \"\";\n            cell.className = cell.className.replace(/field-cell--\\d+/g, \"\");\n            cell.className = \"field-cell\";\n        }\n    }\n}\n\n\n//# sourceMappingURL=index.0e959c6d.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class.js');\nconst game = new Game();\n\n// Write your code here\nconst startButton = document.querySelector('.start');\nlet isGameStarted = false;\n\nstartButton.addEventListener('click', (e) => {\n  const clickedButton = e.target;\n\n  if (!clickedButton) {\n    return;\n  }\n\n  isGameStarted = !isGameStarted;\n\n  if (isGameStarted) {\n    startGame(clickedButton);\n  } else {\n    restartGame(clickedButton);\n  }\n\n  updateGrid(game.getState());\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (!isGameStarted) {\n    return;\n  }\n  e.preventDefault();\n\n  switch (e.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n  }\n\n  updateMessage();\n  updateGrid(game.getState());\n});\n\nfunction startGame(button) {\n  updateButtonState('Retart', 'start', 'restart');\n  updateMessage();\n\n  game.start();\n}\n\nfunction restartGame(button) {\n  updateButtonState('Start', 'restart', 'start');\n  updateMessage('start');\n\n  game.restart();\n}\n\nfunction updateButtonState(text, removeClass, addClass) {\n  startButton.classList.replace(removeClass, addClass);\n  startButton.textContent = text;\n}\n\nfunction updateMessage(type = null) {\n  document.querySelectorAll('.message').forEach((message) => {\n    message.classList.toggle('hidden', true);\n  });\n\n  let messageStatus;\n\n  if (type) {\n    messageStatus = document.querySelector(`.message-${type}`);\n  } else {\n    messageStatus = document.querySelector(`.message-${game.getStatus()}`);\n  }\n\n  if (messageStatus) {\n    messageStatus.classList.toggle('hidden', false);\n  }\n}\n\nfunction updateGrid(newGrid) {\n  const grid = document.querySelectorAll('.field-row');\n  const score = document.querySelector('.game-score');\n\n  score.textContent = game.getScore();\n\n  for (let row = 0; row < 4; row++) {\n    for (let column = 0; column < 4; column++) {\n      const cell = grid[row].children[column];\n\n      if (newGrid[row][column] !== 0) {\n        cell.textContent = newGrid[row][column];\n\n        cell.className = cell.className.replace(/field-cell--\\d+/g, '');\n\n        cell.classList.add(`field-cell--${newGrid[row][column]}`);\n      } else {\n        cell.textContent = '';\n\n        cell.className = cell.className.replace(/field-cell--\\d+/g, '');\n\n        cell.className = 'field-cell';\n      }\n    }\n  }\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  static STATUS_IDLE = 'idle';\n  static STATUS_PLAYING = 'playing';\n  static STATUS_WIN = 'win';\n  static STATUS_LOSE = 'lose';\n  static WINNING_TILE = 2048;\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    // eslint-disable-next-line no-console\n    this.initialState = initialState.map((row) => [...row]);\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.status = Game.STATUS_IDLE;\n  }\n\n  moveLeft() {\n    if (this.status !== Game.STATUS_PLAYING) {\n      return;\n    }\n\n    let stateChanged = false;\n\n    for (let row = 0; row < 4; row++) {\n      const newRow = this.slideAndMerge(this.state[row]);\n\n      if (newRow.toString() !== this.state[row].toString()) {\n        stateChanged = true;\n      }\n\n      this.state[row] = newRow;\n    }\n\n    if (stateChanged) {\n      this.spawnTile();\n    }\n\n    this.checkLose();\n    this.checkWin();\n  }\n  moveRight() {\n    this.state = this.state.map((row) => row.reverse());\n    this.moveLeft();\n    this.state = this.state.map((row) => row.reverse());\n  }\n  moveUp() {\n    this.transpose();\n    this.moveLeft();\n    this.transpose();\n  }\n  moveDown() {\n    this.transpose();\n    this.moveRight();\n    this.transpose();\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state.map((row) => [...row]);\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.status = Game.STATUS_PLAYING;\n\n    this.spawnTile();\n    this.spawnTile();\n\n    this.checkWin();\n    this.checkLose();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.status = Game.STATUS_IDLE;\n  }\n\n  // Add your own methods here\n  spawnTile() {\n    const emptyTiles = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let column = 0; column < 4; column++) {\n        if (this.state[row][column] === 0) {\n          emptyTiles.push({ row, column });\n        }\n      }\n    }\n\n    if (emptyTiles.length > 0) {\n      const { row, column } =\n        emptyTiles[Math.floor(Math.random() * emptyTiles.length)];\n\n      this.state[row][column] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  transpose() {\n    const transposedGrid = this.initialState.map((row) => [...row]);\n\n    for (let row = 0; row < 4; row++) {\n      for (let column = 0; column < 4; column++) {\n        transposedGrid[column][row] = this.state[row][column];\n      }\n    }\n\n    this.state = transposedGrid;\n  }\n\n  slideAndMerge(row) {\n    let filteredRows = row.filter((element) => element !== 0);\n\n    for (let i = 0; i < filteredRows.length - 1; i++) {\n      if (filteredRows[i] === filteredRows[i + 1]) {\n        filteredRows[i] *= 2;\n        this.score += filteredRows[i];\n        filteredRows[i + 1] = 0;\n      }\n    }\n\n    filteredRows = filteredRows.filter((element) => element !== 0);\n\n    while (filteredRows.length !== 4) {\n      filteredRows.push(0);\n    }\n\n    return filteredRows;\n  }\n\n  checkWin() {\n    for (let row = 0; row < 4; row++) {\n      for (let column = 0; column < 4; column++) {\n        if (this.state[row][column] === Game.WINNING_TILE) {\n          this.status = Game.STATUS_WIN;\n        }\n      }\n    }\n  }\n\n  checkLose() {\n    for (let row = 0; row < 4; row++) {\n      for (let column = 0; column < 4; column++) {\n        if (this.state[row][column] === 0) {\n          return;\n        }\n      }\n    }\n\n    for (let row = 0; row < 4; row++) {\n      for (let column = 0; column < 4; column++) {\n        if (\n          (row < 3 &&\n            this.state[row][column] === this.state[row + 1][column]) ||\n          (column < 3 &&\n            this.state[row][column] === this.state[row][column + 1])\n        ) {\n          return;\n        }\n      }\n    }\n\n    this.status = Game.STATUS_LOSE;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$var$Game","STATUS_IDLE","STATUS_PLAYING","STATUS_WIN","STATUS_LOSE","WINNING_TILE","constructor","initialState","map","row","state","score","status","moveLeft","stateChanged","newRow","slideAndMerge","toString","spawnTile","checkLose","checkWin","moveRight","reverse","moveUp","transpose","moveDown","getScore","getState","getStatus","start","restart","emptyTiles","column","push","length","Math","floor","random","transposedGrid","filteredRows","filter","element","i","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$startButton","document","querySelector","$09e991522ca7e64e$var$isGameStarted","$09e991522ca7e64e$var$updateButtonState","text","removeClass","addClass","classList","replace","textContent","$09e991522ca7e64e$var$updateMessage","type","messageStatus","querySelectorAll","forEach","message","toggle","$09e991522ca7e64e$var$updateGrid","newGrid","grid","cell","children","className","add","addEventListener","e","target","preventDefault","key"],"version":3,"file":"index.0e959c6d.js.map"}